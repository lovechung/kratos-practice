// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error)
	SaveUser(ctx context.Context, in *SaveUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/api.v1.User/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/api.v1.User/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUser(ctx context.Context, in *SaveUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.User/SaveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.User/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.User/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	GetUser(context.Context, *UserReq) (*UserReply, error)
	SaveUser(context.Context, *SaveUserReq) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserReq) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *UserReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) SaveUser(context.Context, *SaveUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedUserServer) UpdateUser(context.Context, *UpdateUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.User/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.User/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.User/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUser(ctx, req.(*SaveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.User/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.User/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _User_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _User_SaveUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/api.proto",
}

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClient interface {
	ListCar(ctx context.Context, in *ListCarReq, opts ...grpc.CallOption) (*ListCarReply, error)
	GetCar(ctx context.Context, in *CarReq, opts ...grpc.CallOption) (*CarReply, error)
	SaveCar(ctx context.Context, in *SaveCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type carClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClient(cc grpc.ClientConnInterface) CarClient {
	return &carClient{cc}
}

func (c *carClient) ListCar(ctx context.Context, in *ListCarReq, opts ...grpc.CallOption) (*ListCarReply, error) {
	out := new(ListCarReply)
	err := c.cc.Invoke(ctx, "/api.v1.Car/ListCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetCar(ctx context.Context, in *CarReq, opts ...grpc.CallOption) (*CarReply, error) {
	out := new(CarReply)
	err := c.cc.Invoke(ctx, "/api.v1.Car/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) SaveCar(ctx context.Context, in *SaveCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.Car/SaveCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.Car/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.Car/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
// All implementations must embed UnimplementedCarServer
// for forward compatibility
type CarServer interface {
	ListCar(context.Context, *ListCarReq) (*ListCarReply, error)
	GetCar(context.Context, *CarReq) (*CarReply, error)
	SaveCar(context.Context, *SaveCarReq) (*emptypb.Empty, error)
	UpdateCar(context.Context, *UpdateCarReq) (*emptypb.Empty, error)
	DeleteCar(context.Context, *DeleteCarReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedCarServer()
}

// UnimplementedCarServer must be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (UnimplementedCarServer) ListCar(context.Context, *ListCarReq) (*ListCarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCar not implemented")
}
func (UnimplementedCarServer) GetCar(context.Context, *CarReq) (*CarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedCarServer) SaveCar(context.Context, *SaveCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCar not implemented")
}
func (UnimplementedCarServer) UpdateCar(context.Context, *UpdateCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarServer) DeleteCar(context.Context, *DeleteCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarServer) mustEmbedUnimplementedCarServer() {}

// UnsafeCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServer will
// result in compilation errors.
type UnsafeCarServer interface {
	mustEmbedUnimplementedCarServer()
}

func RegisterCarServer(s grpc.ServiceRegistrar, srv CarServer) {
	s.RegisterService(&Car_ServiceDesc, srv)
}

func _Car_ListCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).ListCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Car/ListCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).ListCar(ctx, req.(*ListCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Car/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetCar(ctx, req.(*CarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_SaveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).SaveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Car/SaveCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).SaveCar(ctx, req.(*SaveCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Car/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).UpdateCar(ctx, req.(*UpdateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Car/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).DeleteCar(ctx, req.(*DeleteCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Car_ServiceDesc is the grpc.ServiceDesc for Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCar",
			Handler:    _Car_ListCar_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _Car_GetCar_Handler,
		},
		{
			MethodName: "SaveCar",
			Handler:    _Car_SaveCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _Car_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Car_DeleteCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/api.proto",
}
